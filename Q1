module KOOL-PRIVATE
  imports KOOL-UNTYPED-SYNTAX
  imports KOOL-UNTYPED

  // Extend the syntax to allow an optional 'private' keyword
  syntax OptPrivate ::= [ "private" ]

  syntax MemberDecl ::= OptPrivate "var" Exps ";"        // For field declarations
                      | OptPrivate "method" Id "(" Ids ")" Block  // For method declarations

  syntax MemberDecls ::= List{MemberDecl,""}

  syntax ClassBlock ::= "{" MemberDecls "}"

  // Adjust class declarations to use MemberDecls
  syntax Stmt ::= "class" Id ClassBlock
                | "class" Id "extends" Id ClassBlock

  // Modify the class declaration rule to handle MemberDecls
  rule <k> class Class1 extends Class2 { MDs:MemberDecls } => .K ...</k>
       <classes>... (.Bag => <classData>
                            <className> Class1 </className>
                            <baseClass> Class2 </baseClass>
                            <declarations> MDs </declarations>
                        </classData>)
       ...</classes>

  // Process MemberDecls during object creation
  rule <k> create(Class:Id)
           => create(Class1) ~> setCrntClass(Class) ~> MDs ~> addEnvLayer ...</k>
       <className> Class </className>
       <baseClass> Class1:Id </baseClass>
       <declarations> MDs:MemberDecls </declarations>

  // Process MemberDecls as a sequence
  rule <k> .MemberDecls => .K ...</k>
  rule <k> (MD:MemberDecl MDs:MemberDecls) => MD ~> MDs ...</k>

  // Modify the environment to store privacy information
  syntax MemberEntry ::= privacy(Privacy, Int)
  syntax Privacy ::= "public" | "private"

  // Function to determine the privacy from OptPrivate
  syntax Privacy ::= privacyOf(OptPrivate) [function]
  rule privacyOf("private") => private
  rule privacyOf(.OptPrivate) => public

  // Adjust method declaration to store privacy
  rule <k> (OP:OptPrivate method F:Id(Xs:Ids) S) => .K ...</k>
       <crntClass> Class:Id </crntClass>
       <location> OL:Int </location>
       <env> Env => Env[F <- privacy(privacyOf(OP), L)] </env>
       <store>... .Map => L |-> methodClosure(Class, OL, Xs, S) ...</store>
       <nextLoc> L => L +Int 1 </nextLoc>

  // Adjust variable declaration to store privacy
  rule <k> (OP:OptPrivate var Xs:Exps;) => .K ...</k>
       <env> Env => foldr (declVar(OP, L), Xs, Env) </env>
       <store>... .Map => foldr (storeVar(L), Xs, .Map) ...</store>
       <nextLoc> L => L +Int length(Xs) </nextLoc>

  syntax Map ::= declVar(OptPrivate, Int, Id, Map) [function]
  rule declVar(OP, L, X, Env) => Env[X <- privacy(privacyOf(OP), L)]

  syntax Map ::= storeVar(Int, Exp, Map) [function]
  rule storeVar(L, E, Store) => Store[L |-> undefined]

  // Adjust member access to include privacy checks
  syntax Exp ::= lookupMember(List, Id, Id) [function]

  rule <k> objectClosure(Class, EnvStack) . X => lookupMember(EnvStack, X, AccessClass) ...</k>
       <crntClass> AccessClass </crntClass>

  rule <k> super . X => lookupMember(EStack, X, AccessClass) ...</k>
       <crntClass> AccessClass </crntClass>
       <envStack> ListItem(envStackFrame(Class, _)) EStack </envStack>

  // Adjust lookupMember to perform privacy checks
  rule lookupMember(ListItem(envStackFrame(DeclClass, Env)) _, X, AccessClass)
    => checkPrivacy(MEntry, DeclClass, AccessClass)
     requires Env[X] ==K MEntry

  rule lookupMember(ListItem(envStackFrame(_, Env)) Rest, X, AccessClass)
    => lookupMember(Rest, X, AccessClass)
     requires notBool(X in keys(Env))

  syntax KItem ::= checkPrivacy(MemberEntry, Id, Id)
  rule checkPrivacy(privacy(public, L), _, _) => lookup(L)
  rule checkPrivacy(privacy(private, L), DeclClass, AccessClass)
    => lookup(L)
     requires DeclClass ==K AccessClass
  rule checkPrivacy(privacy(private, _), DeclClass, AccessClass)
    => privacyError(X)
     requires DeclClass =/=K AccessClass

  syntax KItem ::= privacyError(Id)
  rule <k> privacyError(X:Id) => abort("Access to private member " +String X +String " denied") ...</k>

  // Adjust lvalue rules to include privacy checks
  rule <k> lvalue(objectClosure(Class, EnvStack) . X) => lookupMember(EnvStack, X, AccessClass) ...</k>
       <crntClass> AccessClass </crntClass>


endmodule
