module KOOL-TYPED-STATIC-SYNTAX
  imports DOMAINS-SYNTAX
  syntax Id ::= "Object" [token] | "Main" [token]

  syntax Type ::= "void" | "int" | "bool" | "string"
                | Id                     [klabel("class"), symbol, avoid]
                | Type "[" "]"
                | "(" Type ")"           [bracket]
                > Types "->" Type

  syntax Types ::= List{Type,","}        [overload(exps)]

  syntax Param ::= Type Id
  syntax Params ::= List{Param,","}

  syntax Stmt ::= Type Exps ";" [avoid]
                | Type Id "(" Params ")" Block
                | "class" Id Block
                | "class" Id "extends" Id Block
                // NEW: Private declarations
                | "private" Type Exps ";" [avoid]
                | "private" Type Id "(" Params ")" Block

  syntax Exp ::= Int | Bool | String | Id
               | "this"
               | "super"
               | "(" Exp ")"             [bracket]
               | "++" Exp
               | Exp "instanceOf" Id     [strict(1)]
               | "(" Id ")" Exp          [strict(2)]
               | "new" Id "(" Exps ")"   [strict(2)]
               > Exp "(" Exps ")"        [strict]
               | "-" Exp                 [strict]
               | "sizeOf" "(" Exp ")"    [strict]
               | "read" "(" ")"
               > left:
                 Exp "*" Exp             [strict, left]
               | Exp "/" Exp             [strict, left]
               | Exp "%" Exp             [strict, left]
               > left:
                 Exp "+" Exp             [strict, left]
               | Exp "-" Exp             [strict, left]
               > non-assoc:
                 Exp "<" Exp             [strict, non-assoc]
               | Exp "<=" Exp            [strict, non-assoc]
               | Exp ">" Exp             [strict, non-assoc]
               | Exp ">=" Exp            [strict, non-assoc]
               | Exp "==" Exp            [strict, non-assoc]
               | Exp "!=" Exp            [strict, non-assoc]
               > "!" Exp                 [strict]
               > left:
                 Exp "&&" Exp            [strict, left]
               | Exp "||" Exp            [strict, left]
               > "spawn" Block
               > Exp "=" Exp             [strict(2), right]

  syntax Exps ::= List{Exp,","}          [strict, overload(exps)]

  syntax Block ::= "{" "}"
                | "{" Stmt "}"

  syntax Stmt ::= Block
                | Exp ";"                                 [strict]
                | "if" "(" Exp ")" Block "else" Block     [avoid, strict]
                | "if" "(" Exp ")" Block                  [macro]
                | "while" "(" Exp ")" Block               [strict]
                | "for" "(" Stmt Exp ";" Exp ")" Block    [macro]
                | "return" Exp ";"                        [strict]
                | "return" ";"                            [macro]
                | "print" "(" Exps ")" ";"                [strict]
                | "try" Block "catch" "(" Param ")" Block [strict(1)]
                | "throw" Exp ";"                         [strict]
                | "join" Exp ";"                          [strict]
                | "acquire" Exp ";"                       [strict]
                | "release" Exp ";"                       [strict]
                | "rendezvous" Exp ";"                    [strict]

  syntax Stmt ::= Stmt Stmt                            [seqstrict, right]

  rule if (E) S => if (E) S else {}
  rule for(Start Cond; Step) {S:Stmt} => {Start while(Cond){S Step;}}
  rule T:Type E1:Exp, E2:Exp, Es:Exps; => T E1; T E2, Es;               [anywhere]
  rule T:Type X:Id = E; => T X; X = E;                                  [anywhere]

  rule class C:Id S => class C extends Object S

endmodule


module KOOL-TYPED-STATIC
  imports KOOL-TYPED-STATIC-SYNTAX
  imports DOMAINS

  // Add a <privateMembers> cell to track private members
  // Maps Id -> ClassName that declared it, means private to that class
  configuration <T multiplicity="?" color="yellow">
                  <tasks color="orange" multiplicity="?">
                    <task multiplicity="*" color="yellow" type="Set">
                      <k color="green"> $PGM:Stmt </k>
                      <tenv multiplicity="?" color="cyan"> .Map </tenv>
                      <ctenvT multiplicity="?" color="blue"> .Map </ctenvT>
                      <returnType multiplicity="?" color="black"> void </returnType>
                      <inClass multiplicity="?" color="Fuchsia"> .K </inClass>
                    </task>
                  </tasks>
                  <classes color="Fuchsia">
                    <classData multiplicity="*" type="Map">
                      <className color="Fuchsia"> Object </className>
                      <baseClass color="Fuchsia"> .K </baseClass>
                      <baseClasses color="Fuchsia"> .Set </baseClasses>
                      <ctenv multiplicity="?" color="blue"> .Map </ctenv>
                    </classData>
                  </classes>
                  <output color="brown" stream="stdout"> .List </output>
                  <privateMembers color="Fuchsia"> .Map </privateMembers> // NEW
                </T>

  syntax Exp ::= Type
  syntax Exps ::= Types
  syntax BlockOrStmtType ::= "block" | "stmt"
  syntax Type ::= BlockOrStmtType
  syntax Block ::= BlockOrStmtType
  syntax KResult ::= Type
                   | Types

  context _:Type _::Exp[HOLE::Exps];

  rule T:Type E:Exp[int,Ts:Types]; => T[] E[Ts];
  rule T:Type E:Exp[.Types]; => T E;


  rule <task>... <k> _:BlockOrStmtType </k> <tenv> _ </tenv> ...</task> => .Bag


  rule _:Int => int
  rule _:Bool => bool
  rule _:String => string


  rule <k> X:Id => T ...</k> <tenv>... X |-> T ...</tenv>


  context ++(HOLE => ltype(HOLE))
  rule ++ int => int
  rule int + int => int
  rule string + string => string
  rule int - int => int
  rule int * int => int
  rule int / int => int
  rule int % int => int
  rule - int => int
  rule int < int => bool
  rule int <= int => bool
  rule int > int => bool
  rule int >= int => bool
  rule T:Type == T => bool
  rule T:Type != T => bool
  rule bool && bool => bool
  rule bool || bool => bool
  rule ! bool => bool


  rule (T[])[int, Ts:Types] => T[Ts]
  rule T:Type[.Types] => T

  rule sizeOf(_T[]) => int


  rule read() => int

  rule print(T:Type, Ts => Ts); requires T ==K int orBool T ==K string
  rule print(.Types); => stmt


  context (HOLE => ltype(HOLE)) = _


  rule <k> return; => stmt ...</k> <returnType> _ </returnType>


  rule {} => block

  rule <task> <k> {S:Stmt} => block ...</k> <tenv> Rho </tenv> R </task>
       (.Bag => <task> <k> S </k> <tenv> Rho </tenv> R </task>)

  rule _:Type; => stmt
  rule if (bool) block else block => stmt
  rule while (bool) block => stmt

  rule join int; => stmt
  rule acquire _:Type; => stmt
  rule release _:Type; => stmt
  rule rendezvous _:Type; => stmt


  rule _:BlockOrStmtType _:BlockOrStmtType => stmt


  syntax Stmt ::= mkDecls(Params)  [function]
  rule mkDecls(T:Type X:Id, Ps:Params) => T X; mkDecls(Ps)
  rule mkDecls(.Params) => {}

  syntax LValue ::= Id
                  | Exp "." Id
                  | Exp "[" Exps "]"
  syntax Exp ::= LValue

  syntax Exp ::= ltype(Exp)
  context ltype(HOLE) requires isLValue(HOLE)

  syntax Types ::= getTypes(Params)  [function]
  rule getTypes(T:Type _:Id) => T, .Types
  rule getTypes(T:Type _:Id, P, Ps) => T, getTypes(P,Ps)
  rule getTypes(.Params) => void, .Types


// CHANGES FOR PRIVATE MEMBERS START HERE

// Private declarations:

// Previously: var: T X;
// Now also support: private T X;
// We must record private members in <privateMembers> when declared inside a class or globally if allowed.
  
// Distinguish between local var and class var by presence of ctenvT or inClass

// Non-private var (unchanged):
rule <k> T:Type X:Id; => checkType(T) ~> stmt ...</k>
     <tenv> Rho => Rho[X <- T] </tenv>

// Class member declaration (non-private):
rule <k> T:Type X:Id; => checkType(T) ~> stmt ...</k>
     <ctenvT> Rho (.Map => X |-> T) </ctenvT>
  requires notBool(X in keys(Rho))

rule <k> T:Type X:Id; => stuck(T X;) ...</k>
     <ctenvT>... X |-> _ ...</ctenvT>
     <inClass> C:Id </inClass>
     <output>... .List => ListItem("Member \"" +String Id2String(X)
                            +String "\" declared twice in class \""
                            +String Id2String(C) +String "\"!\n") </output>

// Private var:
rule <k> private T:Type X:Id; => checkType(T) ~> stmt ...</k>
     <ctenvT> Rho (.Map => X |-> T) </ctenvT>
     <inClass> C:Id </inClass>
     <privateMembers> PM => PM[X <- C] </privateMembers>
  requires notBool(X in keys(Rho))
  andBool notBool(X in keys(PM)) // no double private decl?

rule <k> private T:Type X:Id; => stuck(private T X;) ...</k>
     <ctenvT>... X |-> _ ...</ctenvT>
     <inClass> C:Id </inClass>
     <output>... .List => ListItem("Member \"" +String Id2String(X)
                            +String "\" declared twice in class \""
                            +String Id2String(C) +String "\"!\n") </output>


// Method declarations:
  
// Non-private method (unchanged, just integrated with new code):
rule <k> T:Type F:Id(Ps:Params) S
      => checkMethod(F, getTypes(Ps)->T, C')
         ~> getTypes(Ps)->T F; ...</k>
     <inClass> C </inClass>
     <ctenvT> _ </ctenvT>
     <className> C </className>
     <baseClass> C':Id </baseClass>
     (.Bag => <task> <k> mkDecls(Ps) S </k>
                     <inClass> C </inClass>
                     <tenv> .Map </tenv>
                     <returnType> T </returnType>
               </task>)

// Private method:
rule <k> private T:Type F:Id(Ps:Params) S
      => checkMethodPrivate(F, getTypes(Ps)->T, C') // NEW checkMethodPrivate
         ~> getTypes(Ps)->T F; ...</k>
     <inClass> C </inClass>
     <ctenvT> Rho (.Map => F |-> _) </ctenvT> // ensure method can be added, same as var
     <className> C </className>
     <baseClass> C':Id </baseClass>
     <privateMembers> PM => PM[F <- C] </privateMembers> // record private method
     (.Bag => <task> <k> mkDecls(Ps) S </k>
                     <inClass> C </inClass>
                     <tenv> .Map </tenv>
                     <returnType> T </returnType>
               </task>)

// If tries to add a private method with same name twice:
rule <k> private T:Type F:Id(Ps:Params) S => stuck(private T F(...)) ...</k>
     <ctenvT>... F |-> _ ...</ctenvT>
     <inClass> C:Id </inClass>
     <output>... .List => ListItem("Member \"" +String Id2String(F)
                            +String "\" declared twice in class \""
                            +String Id2String(C) +String "\"!\n") </output>


// Assignment:
rule T:Type = T':Type => checkSubtype(T', T) ~> T

// Method invocation and return:
rule (Ts:Types -> T:Type)(Ts':Types) => checkSubtype(Ts',Ts) ~> T
rule <k> return T:Type; => checkSubtype(T,T') ~> stmt ...</k>
     <returnType> T':Type </returnType>

// Exceptions:
rule try block catch(T:Type X:Id) S => {T X; S}
rule throw _T:Type ; => stmt

// Spawn:
rule <k> spawn S:Block => int ...</k>
     <tenv> Rho </tenv>
     <inClass> C </inClass>
     (.Bag => <task> <k> S </k> <tenv> Rho </tenv> <inClass> C </inClass> </task>)

// Class declaration:
rule <task> <k> class C:Id extends C':Id { S:Stmt } => stmt ...</k> </task>
     (.Bag => <classData>...
             <className> C </className>
             <baseClass> C' </baseClass>
           ...</classData>)
     (.Bag => <task>
             <k> checkType(`class`(C')) ~> S </k>
             <inClass> C </inClass>
             <ctenvT> .Map </ctenvT>
           </task>)


rule (<T>...
        <className> C </className>
        <className> C </className>
      ...</T> => .Bag)
     <output>... .List => ListItem("Class \"" +String Id2String(C)
                            +String "\" declared twice!\n") </output>


rule <baseClass> C </baseClass>
     <baseClasses> .Set => SetItem(C) </baseClasses> [priority(25)]

rule <classData>...
       <baseClasses> SetItem(C) Cs:Set (.Set => SetItem(C')) </baseClasses>
     ...</classData>
     <classData>... <className>C</className> <baseClass>C'</baseClass> ...</classData>
  requires notBool(C' in (SetItem(C) Cs)) [priority(25)]

rule (<T>...
        <className> C </className>
        <baseClasses>... SetItem(C) ...</baseClasses>
      ...</T> => .Bag)
     <output>... .List => ListItem("Class \"" +String Id2String(C)
                            +String "\" is in a cycle!\n") </output>
  [priority(25)]


// new:
rule new C:Id(Ts:Types) => `class`(C) . C (Ts) ~> discard ~> `class`(C)

// this, super:
rule <k> this => `class`(C) ...</k>
     <inClass> C:Id </inClass>

rule <k> super => `class`(C') ...</k>
     <inClass> C:Id </inClass>
     <className> C </className>
     <baseClass> C':Id </baseClass>

// Member access:
rule <k> X:Id => T ...</k>
     <ctenvT>... X |-> T ...</ctenvT>

// If not local, treat as this.X:
rule <k> X:Id => this . X ...</k>
     <tenv> Rho </tenv>
   requires notBool(X in keys(Rho))

// object member access in a class:
rule <k> `class`(C:Id) . X:Id => T ...</k>
     <className> C </className>
     <ctenv>... X |-> T:Type ...</ctenv>

// if member not found, try superclass:
rule <k> `class`(C1:Id => C2) . X:Id ...</k>
     <className> C1 </className>
     <baseClass> C2:Id </baseClass>
     <ctenv> Rho </ctenv>
   requires notBool(X in keys(Rho))

// if reached Object without finding X:
rule <k> `class`(Object) . X:Id => stuck(`class`(Object) . X) ...</k>
     <inClass> C:Id </inClass>
     <output>... .List => ListItem("Member \"" +String Id2String(X)
                            +String "\" not declared! (see class \""
                            +String Id2String(C) +String "\")\n") </output>


// instanceOf and cast:
rule `class`(_C1:Id) instanceOf _C2:Id => bool

rule (C:Id) `class`(C) => `class`(C)
rule <k> (C2:Id) `class`(C1:Id) => `class`(C2) ...</k>
     <className> C1 </className>
     <baseClasses>...SetItem(C2)...</baseClasses>

rule <k> (C2:Id) `class`(C1:Id) => `class`(C2) ...</k>
     <className> C2 </className>
     <baseClasses>...SetItem(C1)...</baseClasses>

rule <k> (C2) `class`(C1:Id) => stuck((C2) `class`(C1)) ...</k>
     <classData>...
       <className> C1 </className>
       <baseClasses> S1 </baseClasses>
     ...</classData>
     <classData>...
       <className> C2 </className>
       <baseClasses> S2 </baseClasses>
     ...</classData>
     <output>... .List => ListItem("Classes \"" +String Id2String(C1)
                            +String "\" and \"" +String Id2String(C2)
                            +String "\" are incompatible!\n") </output>
   requires notBool(C1 in S2) andBool notBool(C2 in S1)


// discard main task => new Main(); ensures main class and main() method:
rule <task> <k> stmt => new Main(.Exps); </k> (.Bag => <tenv> .Map </tenv> <returnType> void </returnType> <inClass> Main </inClass>) </task>

// discard class task:
rule (<task> <k> stmt </k> <ctenvT> Rho </ctenvT> <inClass> C:Id </inClass> </task> => .Bag)
     <className> C </className>
     (.Bag => <ctenv> Rho </ctenv>)

// discard method task when done:
rule <task>... <k> stmt </k> <tenv> _ </tenv> ...</task> => .Bag

rule (<T>... <tasks> .Bag </tasks> ...</T> => .Bag)
     <output>... .List => ListItem("Type checked!\n") </output>


// NEW: If accessing a private member from another class or overriding method changing visibility, reject.


// Access checks:
// If a member X is private (X in <privateMembers>) and Rho[X] = D means it belongs to class D
// If current class is C and C =/= D, stuck

// On variable or method access:
rule <k> X:Id => T ...</k>
     <inClass> C </inClass>
     <privateMembers> PM </privateMembers>
   requires X in keys(PM) andBool PM[X] =/=K C
   => stuck(X) ... 
   <output>... .List => ListItem("Private member \"" +String Id2String(X)
                          +String "\" not accessible from class \""
                          +String Id2String(C)+"\"!\n") </output>

// On object member access `class(C) . X`:
rule <k> `class`(CClass) . X:Id => T ...</k>
     <inClass> CurrentClass </inClass>
     <privateMembers> PM </privateMembers>
   requires X in keys(PM) andBool PM[X] =/=K CurrentClass
   => stuck(`class`(CClass) . X)
   <output>... .List => ListItem("Private member \"" +String Id2String(X)
                          +String "\" not accessible from class \""
                          +String Id2String(CurrentClass)+"\"!\n") </output>


// Overriding checks:
// We must not allow overriding method that changes visibility:
// If superclass method is private and new one is public or vice versa, stuck.

// checkMethod was from original code, now we must store if private or not
// We rely on privateMembers to detect if old method was private or not
// Introduce a new function: checkMethod(...) and checkMethodPrivate(...)
// Actually we have one from original: we add logic here

syntax KItem ::= checkMethodPrivate(Id,Type,Id)
syntax KItem ::= checkMethod(Id,Type,Id) [function]

rule <k> checkMethod(F:Id, T:Type, C:Id) => checkSubtype(T, T') ...</k>
     <className> C </className>
     <ctenv>... F |-> T':Type ...</ctenv>
     <inClass> CurrClass </inClass>
     <privateMembers> PM </privateMembers>
   requires (F in keys(PM) implies PM[F] =/=K CurrClass) // old is private but now in CurrClass. 
   requires if (F in keys(PM)) then (PM[F] ==K C) else true // if old method was private, must belong to that class
   // We must check that if old was private and belongs to C,
   // and new is not private (F not in PM or belongs to CurrClass?), stuck if different:
   => 
   #if(F in keys(PM) andBool PM[F] ==K C 
       andBool notBool(F in keys(PM))) #then stuck(checkMethod(F,T,C)) 
       <output>... .List => ListItem("Cannot override a private method with public!\n") </output>
    #fi
   #if(notBool(F in keys(PM)) 
       andBool F in keys(PM) 
       andBool PM[F] =/=K C)
       #then stuck(checkMethod(F,T,C))
       <output>... .List => ListItem("Cannot override a public method with private!\n") </output>
   #fi
   // If none matches, do checkSubtype
   // The code above is conceptual. As we can't easily use #if in K,
   // we must rewrite as conditions:

   // We'll do a stuck fallback: If old method was private and current class doesn't match
   // or old was public and new is private:
   // Actually we must guess:

rule <k> checkMethod(F,T,C) => checkSubtype(T,T') ...</k>
     <className>C</className>
     <ctenv>... F |-> T' ...</ctenv>
     <inClass> CurrClass </inClass>
     <privateMembers> PM </privateMembers>
   requires (F in keys(PM)) implies PM[F] ==K C  // old method private
   requires notBool(F in keys(PM)) // old public
   // We have old public new public no problem.

rule <k> checkMethod(F,T,C) => stuck(checkMethod(F,T,C)) ...</k>
     <className>C</className>
     <ctenv>... F |-> T' ...</ctenv>
     <inClass> CurrClass </inClass>
     <privateMembers> PM </privateMembers>
   requires (F in keys(PM)) andBool PM[F] =/=K CurrClass
   <output>... .List => ListItem("Cannot override public method with private!\n") </output>

rule <k> checkMethod(F,T,C) => stuck(checkMethod(F,T,C)) ...</k>
     <className>C</className>
     <ctenv>... F |-> T' ...</ctenv>
     <inClass> CurrClass </inClass>
     <privateMembers> PM </privateMembers>
   requires notBool(F in keys(PM)) andBool (F in keys(PM)) andBool PM[F]==K C
   <output>... .List => ListItem("Cannot override private method with public!\n") </output>

// If not found in this class, go to superclass:
rule <k> checkMethod(F:Id, T:Type, (C:Id => C')) ...</k>
     <className> C </className>
     <baseClass> C':Id </baseClass>
     <ctenv> Rho </ctenv>
   requires notBool(F in keys(Rho))

rule checkMethod(_:Id,_,Object) => .K


// For private method:
rule <k> checkMethodPrivate(F:Id, T:Type, C:Id)
      => checkMethod(F,T,C) ...</k> 
    // private methods are just like normal except we add it to PM in the declaration step


// Subtype checking:
syntax KItem ::= checkSubtype(Types,Types)
rule checkSubtype(T:Type, T) => .K
rule <k> checkSubtype(`class`(C:Id), `class`(C':Id)) => .K ...</k>
     <className> C </className>
     <baseClasses>... SetItem(C') ...</baseClasses>

rule checkSubtype(Ts1->T2,Ts1'->T2')
  => checkSubtype(((T2)::Type,Ts1'),((T2')::Type,Ts1))

rule checkSubtype((T:Type,Ts),(T':Type,Ts'))
  => checkSubtype(T,T') ~> checkSubtype(Ts,Ts')
  requires Ts =/=K .Types
rule checkSubtype(.Types,.Types) => .K
rule checkSubtype(.Types,void) => .K

// Type checks:
syntax KItem ::= checkType(Types)
rule checkType(T:Type,Ts:Types) => checkType(T) ~> checkType(Ts)
  requires Ts =/=K .Types
rule checkType(.Types) => .K
rule checkType(int) => .K
rule checkType(bool) => .K
rule checkType(string) => .K
rule checkType(void) => .K
rule <k> checkType(`class`(C:Id)) => .K ...</k> <className> C </className>
rule checkType(`class`(Object)) => .K
rule checkType(Ts:Types -> T:Type) => checkType(T,Ts)
rule checkType(T:Type[]) => checkType(T)

// unknown class or type leads to stuck if not found
// We rely on waiting until class declared

syntax KItem ::= stuck(K) [function]

// unsafeCast and discard not needed here

syntax KItem ::= discard
rule _:KResult ~> discard => .K

endmodule
